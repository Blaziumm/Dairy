# Fossil is a configuration file format
# That is domain specific to Java / Kotlin, and FTC / FRC applications
# Fossil was conceptualised by Oscar Chevalier, inspired by some of the characteristics of TOML

# As you may have noticed, the hash character is used for comments

# Types
# Fossil uses type hints
myDouble: double = 10.0

# or it can infer them
inferredDouble = 10.0

# Fossil supports all primitive types, along with Strings
# Fossil also has a more advanced typing system, which we'll look at later

# KV
# Fossil is case-sensitive, and keys can include white space and special characters by surrounding them in single quotes (but not new lines)
key0 = ""
'key 1' = ""
Key0 = ""
'Key 1' = ""

# Strings
# Fossil uses double quotes for strings
string0 = "Hello, dig site!"

# Strings can stretch across several lines, if the first line is blank, the \n will be trimmed
multiLineString = "
one line,
two line,
red line,
blue line
"

# Boolean
isEnabled = true
isDisabled = false

# Tables
# Tables can be declared like so
# This line ends the-top level table
[table1]
key0 = 0
key1 = 1

# This moves us to a table on table1
[table1.sublevel]
key0 = "key0"
key1 = "10"

# This moves us back up, but is discouraged
[table1]
key2 = "two"

# We don't need any of the parent tables to declare child tables
[table2.sublevel]
"a sublevel with an otherwise empty parent" = true

# Table names follow the same rules as keys

# Arrays
# Fossil supports multi-typed comma separated arrays, which can have trailing commas
arr0 = [10, "string", true, ]

# Arrays can stretch across several lines, or contain sub arrays
arr1 = [
    ["one", 1],
    ["two", 2],
]

# Enums
# Fossil supports enums
# Enum declarations get put in the special [ENUM] table, usually placed at the end of the document, or directly after the top-level table ends
[ENUM]

# Enums use the pipe operator (|) to separate items, white space will be trimmed
# It is recommended to use capital letters for both the key and the values of the enum
COLOURS = RED | BLUE | GREEN

# The same naming rules that apply to keys apply to enum keys, and member values
COORDS = 'A 1' | 'A 2' | 'A 3'

# But its recommended to match java and kotlin enum naming schemes:
COORDINATES = A_1 | A_2 | A_3

# The [ENUM] table can have sub tables too

# Using enums
# Note: usually the enum table is put directly after the top-level table, or as the last table in the document, the placement of this table is purely for demonstration purposes
['Using Enums']
colour = RED
blue: COLOUR = BLUE

coord = 'A 1'
coord1: COORD = 'A 1'

coordinate = A_1

# These are the rules of the Fossil language, enjoy!